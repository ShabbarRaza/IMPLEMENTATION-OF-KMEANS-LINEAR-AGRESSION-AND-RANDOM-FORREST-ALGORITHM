{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>85</th>\n",
       "      <th>92</th>\n",
       "      <th>45</th>\n",
       "      <th>27</th>\n",
       "      <th>31</th>\n",
       "      <th>0.0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>85</td>\n",
       "      <td>64</td>\n",
       "      <td>59</td>\n",
       "      <td>32</td>\n",
       "      <td>23</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>86</td>\n",
       "      <td>54</td>\n",
       "      <td>33</td>\n",
       "      <td>16</td>\n",
       "      <td>54</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>91</td>\n",
       "      <td>78</td>\n",
       "      <td>34</td>\n",
       "      <td>24</td>\n",
       "      <td>36</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>87</td>\n",
       "      <td>70</td>\n",
       "      <td>12</td>\n",
       "      <td>28</td>\n",
       "      <td>10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>98</td>\n",
       "      <td>55</td>\n",
       "      <td>13</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   85  92  45  27  31  0.0  1\n",
       "0  85  64  59  32  23  0.0  2\n",
       "1  86  54  33  16  54  0.0  2\n",
       "2  91  78  34  24  36  0.0  2\n",
       "3  87  70  12  28  10  0.0  2\n",
       "4  98  55  13  17  17  0.0  2"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from sklearn import datasets, linear_model\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv(r'C:\\Users\\SHABBAR RAZA\\Desktop\\bupa.csv' )\n",
    "df.head()\n",
    "\n",
    "df = pd.read_csv(r'C:\\Users\\SHABBAR RAZA\\Desktop\\bupa.csv' )\n",
    "df.head()\n",
    "df.columns  = ['mcv', 'alkphos', 'sgpt', 'sgot', 'gammagt', 'drinkno#', 'selector']\n",
    "Y = df['mcv']\n",
    "X = df['selector']\n",
    "\n",
    "X_train = X[:-250]\n",
    "X_test = X[-250:]\n",
    "\n",
    "Y_train = Y[:-250]\n",
    "Y_test = Y[-250:]\n",
    "\n",
    " \n",
    "\n",
    "# Plot outputs\n",
    "plt.scatter(X_test, Y_test, color='black')\n",
    "plt.title('Test Data')\n",
    "plt.xlabel('MCV')\n",
    "plt.ylabel('selector')\n",
    "plt.xticks(())\n",
    "plt.yticks(())\n",
    "\n",
    "\n",
    "\n",
    "regr = linear_model.LinearRegression()\n",
    "\n",
    "\n",
    "regr.fit(X_train, Y_train)\n",
    "\n",
    "\n",
    "plt.plot(X_test, regr.predict(X_test), color='red',linewidth=3)\n",
    "plt.show()\n",
    "           \n",
    "##LINEAR REGRESSION NOW MANUALLY######\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "data = pd.read_csv(r'C:\\Users\\SHABBAR RAZA\\Desktop\\bupa.csv') \n",
    "df.head()\n",
    "df.columns  = ['mcv', 'alkphos', 'sgpt', 'sgot', 'gammagt', 'drinkno#', 'selector']\n",
    "\n",
    "print(data.shape)\n",
    "\n",
    "print(data.coloumns)\n",
    "\n",
    "Y = df['mcv']\n",
    "X = df['selector']\n",
    "\n",
    "input1 = X[:-250]\n",
    "input2 = X[-250:]\n",
    "\n",
    "\n",
    "\n",
    "def estimate_coef(x, y): \n",
    "   \n",
    "    n = data.size(x) \n",
    "  \n",
    "    \n",
    "    m_x, m_y = np.mean(x), np.mean(y)\n",
    "    \n",
    "     devi_1 = SS_xy / SS_xx \n",
    "    devi_0 = m_y - b_1*m_x \n",
    "  \n",
    "    return(devi_0, devi_1) \n",
    "def linear_regression_line(x, y, b): \n",
    "     \n",
    "    plt.scatter(x, y, color = \"m\", \n",
    "               marker = \"o\", s = 30) \n",
    "  \n",
    "    y_pred = b[0] + b[1]*x \n",
    "  \n",
    "    plt.plot(x, y_pred, color = \"r\") \n",
    "  \n",
    "    plt.xlabel('x') \n",
    "    plt.ylabel('y')\n",
    "    \n",
    "    plt.show()\n",
    "    \n",
    "     estimate = estimate_coef(x, y) \n",
    "    print( .format(b[0], b[1])) \n",
    "  \n",
    "    plot_regression_line(x, y, estimate) \n",
    "  \n",
    "\n",
    "           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
