{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_iris\n",
    "import csv\n",
    "import random\n",
    "import math\n",
    "import operator\n",
    "import pandas as pd \n",
    "  \n",
    "data = pd.read_csv('iris.csv') \n",
    "  print(\"Shape:\", data.shape) \n",
    "  \n",
    "print(\"\\nFeatures:\", data.columns) \n",
    "\n",
    "X = data[data.columns[:-1]] \n",
    "y = data[data.columns[-1]] \n",
    "  \n",
    "     su\n",
    "print(\"\\nFeature matrix:\\n\", X.head()) \n",
    "  \n",
    "print(\"\\nResponse vector:\\n\", y.head())\n",
    "\n",
    "\n",
    "def euclideanDistance(value1, value2, length):\n",
    "    eclid_dis = 0\n",
    "    for x in range(length):\n",
    "         eclid_dis+= pow((instance1[x] - instance2[x]), 2)\n",
    "    return math.sqrt(distance)\n",
    "\n",
    "distance = euclideanDistance(X, y, 3)\n",
    "print ('Distance: ' + repr(distance))\n",
    "\n",
    "###EUCLIDEN DISTANCE###########\n",
    "\n",
    "def getKNeighbors(featureSet, ResponseVetor, k):\n",
    "    distances = []\n",
    "    length = len(ResponseVector)-1\n",
    "    for i in range(len(featureSet)):\n",
    "        dist = euclideanDistance(Responsevector, featureSet[i], length)\n",
    "        distances.append((featureSet[x], dist))\n",
    "    distances.sort(key=operator.itemgetter(1))\n",
    "    neighbors = []\n",
    "    for x in range(k):\n",
    "        neighbors.append(distances[x][0])\n",
    "    return neighbors\n",
    "\n",
    "k = 2\n",
    "neighbors = getNeighbors(X, y, 2)\n",
    "print(neighbors)\n",
    "\n",
    "\n",
    "### FOUND OUT THE NEIGHBOURS VALUES ############\n",
    "\n",
    "\n",
    "def voting(neighbors):\n",
    "    Votes = {}\n",
    "    for x in range(len(neighbors)):\n",
    "        response = neighbors[x][-1]\n",
    "        if response in Votes:\n",
    "            Votes[response] += 1\n",
    "        else:\n",
    "            Votes[response] = 1\n",
    "    sortedVotes = sorted(Votes.items(), key=operator.itemgetter(1), reverse=True)\n",
    "    return sortedVotes[0][0]\n",
    "\n",
    "\n",
    "neighbors = [X, X, y]\n",
    "print(getResponse(neighbors))\n",
    "## VOTING WHICH IS THE CLOSEST ##########\n",
    "\n",
    "\n",
    "def Accuracy(testSet, predictions):\n",
    "    correct = 0\n",
    "    for x in range(len(testSet)):\n",
    "        if testSet[x][-1] is predictions[x]:\n",
    "            correct += 1\n",
    "    return (correct/float(len(testSet))) * 100.0\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
